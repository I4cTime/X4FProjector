"""Exporter for weapons."""

import logging
from exporters.helpers import FileLikeProvider, AutoFormatter


LOG = logging.getLogger(__name__)


def tabular_generator(weapons):
    """Generator that produces rows for tabular formats (CSV) from the dict
    generated by export_weapons.
    """

    cols = [
        'name',
        'makerrace',
        # 'description', # every value is "No information available"
        'size',
        'heat_overhead',
        'heat_cooldelay',
        'heat_coolrate',
        'heat_reenable',
        'reload_rate',
        'reload_time',
        'bullet_speed',
        'bullet_lifetime',
        'range',
        'dmg_hull',
        'dmg_shields',
        'dmg_min',
        'dmg_max',
        'dmg_repair',
        'dmg_delay',
        'dmg_mining_mult',
        'bullet_amount',
        'bullet_barrelamount',
        'bullet_timediff',
        'bullet_angle',
        'bullet_maxhits',
        'bullet_ricochet',
        'bullet_restitution',
        'bullet_scale',
        'bullet_attach',
        'bullet_chargetime',
        'bullet_reload_time',
        'bullet_reload_rate',
        'bullet_heat',
        'bullet_heat_initial',
        'rotation_speed',
        'rotation_accel',
        'zoom_factor',
        'zoom_time',
        'zoom_delay',
        'hull',
        'hull_integrated',
        'hull_threshold',
        'hull_hittable',
    ]

    # output header
    yield ['id'] + cols

    for weapon_id in sorted(weapons.keys()):
        weapon = weapons[weapon_id]

        yield [weapon_id] + [weapon.get(col) for col in cols]


def load_bullet_data(weapon, bullet):
    """Takes bullet data and loads it into the weapon dictionary produced by
    export_weapons.

    Arguments:
    weapon: weapon dictionary.
    bullet: bullet properties dictionary from MacroDB.
    """
    weapon['bullet_speed'] = bullet['speed']
    weapon['bullet_lifetime'] = bullet['lifetime']

    w_range = None
    if bullet['range'] == 0:
        w_range = bullet['speed'] * bullet['lifetime']
    elif bullet['lifetime'] == 0 or bullet['speed'] == 0:
        w_range = bullet['range']
    else:
        w_range = min(bullet['range'], bullet['speed'] * bullet['lifetime'])

    weapon['range'] = w_range
    weapon['bullet_amount'] = bullet['amount']
    weapon['bullet_barrelamount'] = bullet['barrelamount']
    weapon['bullet_timediff'] = bullet['timediff']
    weapon['bullet_angle'] = bullet['angle']
    weapon['bullet_maxhits'] = bullet['maxhits']
    weapon['bullet_ricochet'] = bullet['ricochet']
    weapon['bullet_restitution'] = bullet['restitution']
    weapon['bullet_scale'] = bullet['scale']
    weapon['bullet_attach'] = bullet['attach']
    weapon['bullet_chargetime'] = bullet['chargetime']
    weapon['bullet_reload_time'] = bullet['reload_time']
    weapon['bullet_reload_rate'] = bullet['reload_rate']
    weapon['bullet_heat'] = bullet['heat']
    weapon['bullet_heat_initial'] = bullet['heat_initial']

    weapon['dmg_hull'] = bullet['dmg_hull']
    weapon['dmg_shields'] = bullet['dmg_shields']
    weapon['dmg_min'] = bullet['dmg_min']
    weapon['dmg_max'] = bullet['dmg_max']
    weapon['dmg_repair'] = bullet['dmg_repair']
    weapon['dmg_delay'] = bullet['dmg_delay']
    weapon['dmg_mining_mult'] = bullet['dmg_mining_mult']


def export_weapons(macro_db, destination=None, output_format='csv'):
    """Parses data about weapons from the MacroDB and exports it.

    Arguments:
    macro_db: MacroDB into which weapons were loaded.
    destination: output type and destination. Supported values:
                 - None: output to string and return it.
                 - string: interpreted as a file path. Writes the output to the
                           file and returns None.
                 - other: interpreted as file-like object. Writes the output to
                          it and returns None.
    output_format: format for outputting the data. See helper.AutoFormatter for
                   more details.
    """
    output = FileLikeProvider(destination)

    weapons = {}

    for weapon_id in macro_db.macros_by_type['weapon']:
        weapons[weapon_id] = macro_db.macros[weapon_id].properties

    for weapon_id in macro_db.macros_by_type['turret']:
        weapons[weapon_id] = macro_db.macros[weapon_id].properties

    for (weapon_id, weapon) in weapons.items():
        if 'bullet_class' not in weapon:
            continue

        bullet_macro = macro_db.macros.get(weapon['bullet_class'])
        if not bullet_macro:
            LOG.warning('Cannot find bullet macro %s for weapon %s',
                        weapon['bullet_class'], weapon_id)
        else:
            load_bullet_data(weapon, bullet_macro.properties)

    formatter = AutoFormatter(output_format)
    with output as output_file:
        if formatter.is_tabular():
            formatter.output(tabular_generator(weapons), output_file)
        elif formatter.is_structured():
            formatter.output(weapons, output_file)
        else:
            raise ValueError('Unknown formatter type for format {}'
                             .format(output_format))

    return output.get_return()
