"""Exporter for missile launchers."""

import logging
from exporters.helpers import FileLikeProvider, AutoFormatter


LOG = logging.getLogger(__name__)


def tabular_generator(missilelaunchers):
    """Generator that produces rows for tabular formats (CSV) from the dict
    generated by export_missilelaunchers.
    """

    cols = [
        'name',
        'makerrace',
        # 'description',  # every value is "No information available"
        'size',
        'missile_damage_hull',
        'missile_damage_shield',
        'missile_hull',
        'range',
        'lifetime',
        'capacity',
        'ammunition',
        'reload_time',
        'countermeasure_resilience',
        'missile_amount',
        'missile_barrelamount',
        'lock_time',
        'lock_range',
        'lock_angle',
        'missile_retarget',
        'missile_guided',
        'missile_distribute',
        'missile_mass',
        'missile_thrust_forward',
        'missile_thrust_reverse',
        'missile_thrust_strafe',
        'missile_thrust_pitch',
        'missile_thrust_yaw',
        'missile_thrust_roll',
        'missile_drag_horizontal',
        'missile_drag_vertical',
        'missile_drag_pitch',
        'missile_drag_yaw',
        'missile_drag_roll',
        'rotation_speed',
        'hull',
        'hull_integrated',
        'hull_threshold',
        'hull_hittable',
    ]

    # output header
    yield ['id'] + cols

    for ml_id in sorted(missilelaunchers.keys()):
        missilelauncher = missilelaunchers[ml_id]

        yield [ml_id] + [missilelauncher.get(col) for col in cols]


def load_missile_data(launcher, missile, engine):
    """Takes missile and missile engine data and loads it into the missile
    launcher dictionary produced by export_missilelaunchers.

    Arguments:
    launcher: missile launcher dictionary.
    missile: missile properties dictionary from the MacroDB.
    engine: engine properties dictionary from the MacroDB.
    """
    launcher['missile_amount'] = missile['amount']
    launcher['missile_barrelamount'] = missile['barrelamount']
    launcher['lifetime'] = missile['lifetime']
    launcher['range'] = missile['range']
    launcher['missile_retarget'] = missile['retarget']
    launcher['missile_guided'] = missile['guided']
    launcher['missile_distribute'] = missile['distribute']
    launcher['missile_damage_hull'] = missile['damage_hull']
    launcher['missile_damage_shield'] = missile['damage_shield']
    launcher['reload_time'] = missile['reload_time']
    launcher['missile_hull'] = missile['hull']
    launcher['countermeasure_resilience'] = missile['contermeasure_resilience']
    launcher['lock_time'] = missile['lock_time']
    launcher['lock_range'] = missile['lock_range']
    launcher['lock_angle'] = missile['lock_angle']
    launcher['missile_mass'] = missile['mass']
    launcher['missile_inertia_pitch'] = missile['inertia_pitch']
    launcher['missile_inertia_yaw'] = missile['inertia_yaw']
    launcher['missile_inertia_roll'] = missile['inertia_roll']
    launcher['missile_drag_forward'] = missile['drag_forward']
    launcher['missile_drag_reverse'] = missile['drag_reverse']
    launcher['missile_drag_horizontal'] = missile['drag_horizontal']
    launcher['missile_drag_vertical'] = missile['drag_vertical']
    launcher['missile_drag_pitch'] = missile['drag_pitch']
    launcher['missile_drag_yaw'] = missile['drag_yaw']
    launcher['missile_drag_roll'] = missile['drag_roll']

    if engine:
        launcher['missile_thrust_forward'] = engine['thrust_forward']
        launcher['missile_thrust_reverse'] = engine['thrust_reverse']
        launcher['missile_thrust_strafe'] = engine['thrust_strafe']
        launcher['missile_thrust_pitch'] = engine['thrust_pitch']
        launcher['missile_thrust_yaw'] = engine['thrust_yaw']
        launcher['missile_thrust_roll'] = engine['thrust_roll']


def export_missilelaunchers(macro_db, destination=None, output_format='csv'):
    """Parses data about missile launchers from the MacroDB and exports it.

    Arguments:
    macro_db: MacroDB into which missilelaunchers were loaded.
    destination: output type and destination. Supported values:
                 - None: output to string and return it.
                 - string: interpreted as a file path. Writes the output to the
                           file and returns None.
                 - other: interpreted as file-like object. Writes the output to
                          it and returns None.
    output_format: format for outputting the data. See helper.AutoFormatter for
                   more details.
    """
    output = FileLikeProvider(destination)

    missilelaunchers = {}

    for ml_id in macro_db.macros_by_type['missilelauncher']:
        missilelaunchers[ml_id] = macro_db.macros[ml_id].properties

    for ml_id in macro_db.macros_by_type['missileturret']:
        missilelaunchers[ml_id] = macro_db.macros[ml_id].properties

    for ml_id in macro_db.macros_by_type['bomblauncher']:
        missilelaunchers[ml_id] = macro_db.macros[ml_id].properties

    for (ml_id, launcher) in missilelaunchers.items():
        if 'bullet_class' not in launcher:
            continue

        missile_macro = macro_db.macros.get(launcher['bullet_class'])
        if not missile_macro:
            LOG.warning('Cannot find missile macro %s for launcher %s',
                        launcher['bullet_class'], ml_id)
            continue

        engine_macro = None
        for (_, macro_ref) in missile_macro.connections:
            if not macro_ref.startswith('engine_missile_') and \
               not macro_ref.startswith('engine_limpet_'):
                continue

            engine_macro = macro_db.macros.get(macro_ref)

            if engine_macro:
                break

        if not engine_macro:
            LOG.warning('Cannot find engine for missle %s',
                        launcher['bullet_class'])

        load_missile_data(launcher, missile_macro.properties,
                          engine_macro.properties if engine_macro else None)

    formatter = AutoFormatter(output_format)
    with output as output_file:
        if formatter.is_tabular():
            formatter.output(tabular_generator(missilelaunchers), output_file)
        elif formatter.is_structured():
            formatter.output(missilelaunchers, output_file)
        else:
            raise ValueError('Unknown formatter type for format {}'
                             .format(output_format))

    return output.get_return()
