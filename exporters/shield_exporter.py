"""Exporter for shields."""

from exporters.helpers import FileLikeProvider, AutoFormatter


def tabular_generator(shields):
    """Generator that produces rows for tabular formats (CSV) from the dict
    generated by export_shields.
    """

    cols = [
        'name',
        'makerrace',
        # 'description', # every value is "No information available"
        'capacity',
        'size',
        'recharge_rate',
        'recharge_delay',
        'hull',
        'hull_integrated',
        'hull_threshold',
    ]

    # output header
    yield ['id'] + cols

    for shield_id in sorted(shields.keys()):
        shield = shields[shield_id]

        yield [shield_id] + [shield.get(col) for col in cols]


def export_shields(macro_db, destination=None, output_format='csv'):
    """Parses data about shields from the MacroDB and exports it.

    Arguments:
    macro_db: MacroDB into which shields were loaded.
    destination: output type and destination. Supported values:
                 - None: output to string and return it.
                 - string: interpreted as a file path. Writes the output to the
                           file and returns None.
                 - other: interpreted as file-like object. Writes the output to
                          it and returns None.
    output_format: format for outputting the data. See helper.AutoFormatter for
                   more details.
    """
    output = FileLikeProvider(destination)

    shields = {}

    for shield_id in macro_db.macros_by_type['shieldgenerator']:
        shields[shield_id] = macro_db.macros[shield_id].properties

    formatter = AutoFormatter(output_format)
    with output as output_file:
        if formatter.is_tabular():
            formatter.output(tabular_generator(shields), output_file)
        elif formatter.is_structured():
            formatter.output(shields, output_file)
        else:
            raise ValueError('Unknown formatter type for format {}'
                             .format(output_format))

    return output.get_return()
